//! Arduino-specific code generator

use super::{CodeGenerator, GeneratedCode};
use crate::{Model, Result};
use std::path::Path;

/// Arduino code generator
pub struct ArduinoCodeGen;

impl ArduinoCodeGen {
    pub fn new() -> Self {
        Self
    }
}

impl CodeGenerator for ArduinoCodeGen {
    fn generate(&self, model: &Model, output_dir: &Path) -> Result<GeneratedCode> {
        std::fs::create_dir_all(output_dir)?;

        let ino_content = format!(r#"// Generated by Blitzed v{}
// Arduino model deployment

#include "blitzed_model.h"

void setup() {{
    Serial.begin(9600);
    Serial.println("Blitzed Model on Arduino");
    
    if (model_init() != 0) {{
        Serial.println("Error: Model initialization failed");
        return;
    }}
    
    Serial.println("Model initialized successfully");
}}

void loop() {{
    // Example inference every 5 seconds
    static unsigned long lastRun = 0;
    unsigned long currentTime = millis();
    
    if (currentTime - lastRun >= 5000) {{
        runInference();
        lastRun = currentTime;
    }}
}}

void runInference() {{
    model_input_t input[MODEL_INPUT_SIZE];
    model_output_t output[MODEL_OUTPUT_SIZE];
    
    // Generate sample input data
    for (int i = 0; i < MODEL_INPUT_SIZE; i++) {{
        input[i] = (model_input_t)(random(256) - 128);
    }}
    
    Serial.println("Running inference...");
    unsigned long start = millis();
    
    if (model_predict(input, output) == 0) {{
        unsigned long duration = millis() - start;
        Serial.print("Inference completed in ");
        Serial.print(duration);
        Serial.println(" ms");
        
        // Print top result
        Serial.print("Top output: ");
        Serial.println(output[0]);
    }} else {{
        Serial.println("Inference failed");
    }}
}}
"#, crate::VERSION);

        let ino_path = output_dir.join("blitzed_model.ino");
        std::fs::write(&ino_path, &ino_content)?;

        Ok(GeneratedCode {
            implementation_file: ino_content,
            header_file: None,
            example_file: Some(ino_path.to_string_lossy().to_string()),
            build_config: None,
            dependencies: vec!["Arduino IDE".to_string()],
        })
    }

    fn target_name(&self) -> &str {
        "arduino"
    }

    fn dependencies(&self) -> Vec<String> {
        vec!["Arduino IDE".to_string()]
    }
}

impl Default for ArduinoCodeGen {
    fn default() -> Self {
        Self::new()
    }
}